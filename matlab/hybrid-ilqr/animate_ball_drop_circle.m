function animate_ball_drop_circle(xout, dt,uout,Filename)
bRecord = 1;  % Uncomment this to save a video
%  bRecord = 0;
if bRecord
    % Define video recording parameters
    if(nargin<4)
    Filename = 'ball_drop_circle_animation';
    else
        Filename = [Filename,'_final'];
    end
    v = VideoWriter(Filename, 'MPEG-4');
    myVideo.Quality = 100;
    open(v);
end

% xout: collection of state vectors at each time, output from ode45
% dt: (difference in time between each row of xout, generated by calling
% ode45 with the argument [tstart:dt:tfinal];)

% Define axis window
xmin = -2;
xmax = 2;
ymin = 3;
ymax = 7;

% Draw contact surfaces
x_a = linspace(xmin, xmax,500);
y_a = linspace(ymin, ymax,500);
[X,Y] = meshgrid(x_a,y_a);
a1 = Y;
% a2 = X+Y+1;
% a2 = 0.1*X + Y - 2;
% a2 = compute_a2(X,Y);
a2 = (X).^2 + (Y-5).^2 - 2^2;
% contour(X,Y,a1,[0,0], 'k'); hold on;

% Only want 1 contact mode for now
contour(X,Y,a2,[0,0], 'k'); hold on;
% contour(X,Y,a3,[0,0], 'k')

% Create trace of trajectory and particle object
h = animatedline('LineStyle', ':', 'LineWidth', 1.5);
particle = [];
force_handle = [];

% Set up axes
axis equal
axis([xmin xmax ymin ymax])
xlabel('x')
ylabel('y')
if(size(xout,1)>=1000)
   skip = 10;
else
    skip = 1;
end
% draw
for ii = 1:skip:size(xout,1)
    a = tic;
    addpoints(h,xout(ii,1),xout(ii,2));
    
    delete(particle) % Erases previous particle
    delete(force_handle) % Erases previous particle
    particle = scatter(xout(ii,1),xout(ii,2), 'ro','filled');
    hold on
    if(nargin>2)
        force_handle = quiver(xout(ii,1),xout(ii,2),uout(ii,1)/10,uout(ii,2)/10,'b');
    else
        force_handle = [];
    end
    drawnow limitrate
    if bRecord
        frame = getframe(gcf);
        writeVideo(v,frame);
    else
        pause(dt - toc(a)); % waits if drawing frame took less time than anticipated
    end
end

if bRecord
    close(v);
end